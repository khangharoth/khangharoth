package com.extractor;

import com.tangosol.io.pof.EvolvablePortableObject;
import com.tangosol.io.pof.PofContext;
import com.tangosol.io.pof.PofReader;
import com.tangosol.io.pof.PofWriter;
import com.tangosol.io.pof.reflect.PofNavigator;
import com.tangosol.io.pof.reflect.PofValue;
import com.tangosol.io.pof.reflect.PofValueParser;
import com.tangosol.util.Binary;
import com.tangosol.util.BinaryEntry;
import com.tangosol.util.extractor.EntryExtractor;

import java.io.IOException;
import java.util.Collection;
import java.util.Map;

public class CollectionExtractor extends EntryExtractor implements EvolvablePortableObject {

    private PofNavigator navigator;

    public CollectionExtractor() {
    }

    public CollectionExtractor(PofNavigator navigator) {
        this.navigator = navigator;
    }

    @Override
    public Object extractFromEntry(Map.Entry entry) {
        BinaryEntry binaryEntry = (BinaryEntry) entry;
        PofContext ctx = (PofContext) binaryEntry.getSerializer();

        Binary binaryValue = binaryEntry.getBinaryValue();

        if (binaryValue == null) {
            return null;
        }

        PofValue valueRoot = PofValueParser.parse(binaryValue, ctx);
        
        Object collection = this.navigator.navigate(valueRoot).getValue();
        if (collection == null) {
            return null;
        }

        if (!(collection instanceof Collection)) {
            throw new IllegalArgumentException("Collection extractor expects to find a Collection.  Found: " + collection.getClass());
        }

        return collection;
    }

    @Override
    public void readExternal(PofReader pofReader) throws IOException {
        this.navigator = (PofNavigator) pofReader.readObject(100);
    }

    @Override
    public void writeExternal(PofWriter pofWriter) throws IOException {
        pofWriter.writeObject(100, this.navigator);
    }

    @Override
    public int getImplVersion() {
        return 1;
    }

    private int dataVersion = 0;

    @Override
    public int getDataVersion() {
        return dataVersion;
    }

    @Override
    public void setDataVersion(int version) {
        if (dataVersion != 0) {
            throw new IllegalStateException("Data version has already been set");
        }
        dataVersion = version;
    }

    private Binary futureData;

    @Override
    public Binary getFutureData() {
        return futureData;
    }

    @Override
    public void setFutureData(Binary futureData) {
        if (this.futureData != null) {
            throw new IllegalStateException("futureData has already been set");
        }
        this.futureData = futureData;
    }

    @Override
    public String toString() {
        return "CollectionExtractor(navigator=" + navigator +")";
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CollectionExtractor that = (CollectionExtractor) o;

        if (navigator != null ? !navigator.equals(that.navigator) : that.navigator != null) {
            return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return navigator != null ? navigator.hashCode() : 0;
    }
}


